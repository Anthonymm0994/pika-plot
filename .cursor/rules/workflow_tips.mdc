---
title: Pika-Plot Workflow Tips
type: workflow-guidance
version: 1.0.0
updated: 2024-01-01
---

# Workflow Tips for Pika-Plot Development

## Quick Development Patterns

### Initial Project Setup
```bash
# Always use piped output on Windows
cargo new --lib pika-core 2>&1 | cat
cargo new --lib pika-engine 2>&1 | cat
cargo new --lib pika-ui 2>&1 | cat
cargo new --bin pika-app 2>&1 | cat

# Set up workspace in root Cargo.toml
```

### Building and Testing
```bash
# Always pipe to prevent hangs
cargo build 2>&1 | cat
cargo test 2>&1 | cat
cargo run --release 2>&1 | cat

# For specific crate
cargo build -p pika-core 2>&1 | cat
```

## Code Reuse Patterns

### From Pebble
Look for these patterns to reuse:
- `src/ui/csv_import.rs` - CSV import dialog
- `src/ui/table_view.rs` - Data table rendering
- `src/ui/schema_view.rs` - Schema display
- `src/ui/theme.rs` - Dark/light theme logic

### From Frog-viz
Look for these patterns to reuse:
- `src/plots/scatter.rs` - Scatter plot math
- `src/plots/line.rs` - Line plot algorithms
- `src/plots/axis.rs` - Axis calculation
- `src/plots/colors.rs` - Color scales

## Common Tasks

### Adding a New Node Type
1. Define the node struct in `pika-core/src/nodes/mod.rs`
2. Implement Node trait in `pika-ui/src/nodes/[node_name].rs`
3. Add to node factory in `pika-ui/src/nodes/factory.rs`
4. Update serialization in `pika-core/src/serde/nodes.rs`
5. Add tests in `pika-ui/tests/nodes/[node_name].rs`

### Adding a New Plot Type
1. Define plot config in `pika-core/src/plots/configs.rs`
2. Implement renderer in `pika-ui/src/plots/renderers/[plot_name].rs`
3. Add GPU pipeline if needed in `pika-ui/src/gpu/pipelines/[plot_name].rs`
4. Create shader in `pika-ui/shaders/[plot_name].wgsl`
5. Add to plot factory in `pika-ui/src/plots/factory.rs`

### Implementing a New Export Format
1. Add format enum variant in `pika-core/src/export/formats.rs`
2. Implement exporter in `pika-engine/src/export/[format].rs`
3. Add UI option in `pika-ui/src/dialogs/export.rs`
4. Add tests with sample outputs

## Debugging Tips

### Memory Issues
```rust
// Add temporary logging
log::info!("Memory before: {} MB", memory_monitor.used_mb());
let result = expensive_operation();
log::info!("Memory after: {} MB", memory_monitor.used_mb());

// Use conditional compilation for debug builds
#[cfg(debug_assertions)]
{
    println!("Allocation size: {}", size);
}
```

### GPU Debugging
```rust
// Enable GPU validation layers in debug
let instance = wgpu::Instance::new(wgpu::InstanceDescriptor {
    backends: wgpu::Backends::DX12,
    #[cfg(debug_assertions)]
    dx12_shader_compiler: wgpu::Dx12Compiler::Dxc {
        dxil_path: None,
        dxc_path: None,
    },
});

// Capture GPU frames for analysis
device.start_capture();
render_frame();
device.stop_capture();
```

### Event Flow Tracing
```rust
// Trace events through the system
#[derive(Debug)]
pub struct TracedEvent<T> {
    pub event: T,
    pub timestamp: Instant,
    pub source: &'static str,
}

// Use in development
let event = TracedEvent {
    event: AppEvent::QueryComplete { ... },
    timestamp: Instant::now(),
    source: "engine::query_executor",
};
```

## Performance Profiling

### CPU Profiling
```bash
# Use cargo-flamegraph
cargo install flamegraph
cargo flamegraph --bin pika-app -- --bench-file large.csv 2>&1 | cat

# Use Windows Performance Toolkit
wpr -start CPU
cargo run --release
wpr -stop trace.etl
```

### GPU Profiling
- Use RenderDoc for frame analysis
- Use NSight for NVIDIA GPUs
- Use GPUView for Windows timeline
- Add timing queries in shaders

## Testing Strategies

### Data Generation
```rust
// Generate test CSVs
use fake::{Fake, Faker};

fn generate_test_csv(rows: usize) -> String {
    let mut csv = String::from("id,name,value,date\n");
    for i in 0..rows {
        csv.push_str(&format!(
            "{},{},{},{}\n",
            i,
            Faker.fake::<String>(),
            Faker.fake::<f64>(),
            Faker.fake::<NaiveDate>()
        ));
    }
    csv
}
```

### Benchmark Patterns
```rust
use criterion::{black_box, criterion_group, criterion_main, Criterion};

fn bench_query_cache(c: &mut Criterion) {
    let cache = setup_cache();
    
    c.bench_function("cache_hit", |b| {
        b.iter(|| {
            cache.get(black_box("SELECT * FROM test"))
        });
    });
}
```

## Version Control

### Commit Message Format
```
feat(ui): Add export dialog for CSV files

- Implement file chooser integration
- Add progress bar for large exports
- Handle encoding options

Closes #123
```

### PR Checklist
- [ ] Tests pass locally
- [ ] No compiler warnings
- [ ] Memory usage tested
- [ ] GPU compatibility verified
- [ ] Documentation updated
- [ ] Follows project style

## Common Gotchas

### Windows Path Handling
```rust
// Always normalize paths
let path = PathBuf::from(user_input);
let normalized = path.canonicalize()?;

// Handle UNC paths
if normalized.to_string_lossy().starts_with(r"\\?\") {
    // Special handling
}
```

### DuckDB Connection
```rust
// Don't share connections across threads
// Use Arc<Mutex<Connection>> or connection pool

// Close connections properly
drop(conn); // Explicit drop before shutdown
```

### GPU Resource Cleanup
```rust
// Always implement Drop for GPU resources
impl Drop for PlotRenderer {
    fn drop(&mut self) {
        // Ensure GPU resources are released
        self.pipeline = None;
        self.buffers.clear();
    }
}
```

## Productivity Shortcuts

### Quick Iteration
```bash
# Watch for changes and rebuild
cargo watch -x "build -p pika-ui" -s "echo Build complete"

# Run tests on save
cargo watch -x test
```

### Documentation
```bash
# Generate and open docs
cargo doc --open --no-deps

# Document with examples
cargo test --doc
```

Remember: When in doubt, check the patterns in `pebble/` and `frog-viz/` first!
